// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary" // Use binary engine for Vercel compatibility
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  imagePath              String
  imagePath1             String
  imagePath2             String
  imagePath3             String
  imagePath4             String
  imagePath5             String
  description            String
  isAvailable            Boolean                @default(false)
  isSoldOut              Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]

  collectionId           String?
  collection             Collection? @relation(fields: [collectionId], references: [id], onDelete: Restrict)
}

model Collection {
  id                     String                 @id @default(uuid())
  name                   String
  videoPath              String
  title                  String
  description            String
  isAvailable            Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  products               Product[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}
